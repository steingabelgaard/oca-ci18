#!/usr/bin/env python
"""Print addons to test as pip requirements pointing to local directories.
Addons that are referenced as direct URLs in test-requirements.txt are ignored
because they are going to be installed from there, as test-requirements.txt
must have priority over the local repo, when there are PR references in it.
"""

import argparse
import os
import re
import subprocess
from pathlib import Path


def _make_addon_dist_name(name):
    odoo_series = int(os.getenv("ODOO_VERSION").partition(".")[0])
    return "odoo{odoo_series}-addon-{name}".format(
        name=name,
        odoo_series=odoo_series if odoo_series < 15 else "",
    )


def _make_addon_req(path, editable):
    addon_uri = path.resolve().as_uri()
    addon_dist_name = _make_addon_dist_name(path.name)
    if editable:
        return "-e {addon_uri}#egg={addon_dist_name}".format(
            addon_uri=addon_uri, addon_dist_name=addon_dist_name
        )
    return "{addon_dist_name} @ {addon_uri}".format(
        addon_dist_name=addon_dist_name, addon_uri=addon_uri
    )


def _list_addons_to_test(addons_dir):
    return (
        subprocess.check_output(
            ["bin/sg_list_addons_in_checkout", addons_dir], 
            universal_newlines=True)
        .strip()
        .split(",")
    )


def _addons_in_test_requirements(addons_dir):
    """Return a set of addon names that have direct URL requirements in test-requirements.txt."""
    test_requirements_path = addons_dir / "test-requirements.txt"
    if not test_requirements_path.exists():
        return set()
    url_addon_regex = re.compile(r"^odoo\d*-addon-(?P<addon_name>[a-zA-Z0-9_-]+) *@")
    res = set()
    for line in test_requirements_path.read_text().splitlines():
        match = url_addon_regex.match(line)
        if match:
            res.add(match.group("addon_name").replace("-", "_"))
    return res


parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("checkoutdir")
parser.add_argument(
    "--editable",
    action="store_true",
    help="Path to addons dir",
)
args = parser.parse_args()

addons_dir = args.checkoutdir
addons_to_skip = _addons_in_test_requirements(addons_dir)
for addon_name in _list_addons_to_test(addons_dir):
    if addon_name in addons_to_skip:
        continue
    pyproject_path = addons_dir / addon_name / "pyproject.toml"
    if pyproject_path.exists():
        print(_make_addon_req(pyproject_path.parent, args.editable))
    else:
        setuppy_path = addons_dir / "setup" / addon_name / "setup.py"
        if setuppy_path.exists():
            print(_make_addon_req(setuppy_path.parent, args.editable))
